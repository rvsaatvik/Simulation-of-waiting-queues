// Hernandez-CIS610-Spring-2015-programming assignment 1
/*
build a simulation of waiting queues at an airline check-in counter, organized as follows: 
-There are two types of passengers: first clas, and coach
-There are two service stations for first class, and three for coach
-There is a single queue for each type of passenger (first class, coach)
-Passenger arrival times are random and are generatored by a random number generator.
-Average arrival rates for passengers are R1 for first class and R2 for coach.
These are decided at run-time by prompting the user.
-Service time is random and varies uniformly between 1 and S1 for first class, 
and between 1 and S2 for coach.  
Parameters S1 and S2 are also determined at run-time, by prompting the user.
-Whenever a service station is available and the corresponding queue is not empty, 
we pick the passenger at the front of the queue and place her/him on the service station.
-Whenever a first class service station is available and the first class queue is empty, 
the service station may service a passenger from coach.
-The duration of the expeeriment, in minutes, is decided by the user at run time.
-Statistics generated by the simulation include: average service time, maximum service time, 
number served in each class, maximum queue length for each type of passenger.
*/

using System;
using System.Collections;
using System.Collections.Generic;



    public class cs610programmingapplication1
    {

        public static void Main(string[] args)
        {

            // initialize variables in declarations
            int passengerNumber = 0;  

            object removedObject = null;

            Queue queueFirstClass = new Queue();  
            Queue queueCoach = new Queue();  

            int passengerArrivalTime;  
            Random randomPassengerArrivalTime = new Random();  

            Random randomPassengerType = new Random();  


            double averageArrivalRateFirstClassR1;     //prompt user for this
            double averageArrivalRateCoachR2;          //prompt user for this 

            int experimentDurationInMinutes;    //prompt user for this  
            int passengersTotalServiceTime = 0;     

            int maximumServiceTimeFirstClass;  
            int maximumServiceTimeCoach;  

            Random randomServiceTime = new Random();
            int serviceTime;

            Queue serviceStation1FirstClass = new Queue();
            Queue serviceStation2FirstClass = new Queue();

            Queue serviceStation1Coach = new Queue();
            Queue serviceStation2Coach = new Queue();
            Queue serviceStation3Coach = new Queue();





            //Statistics values to be generated by this simulation
            float averageServiceTime;
            float maximumServiceTime;

            int numbersServedInFirstClass;
            int numbersServedInCouch;
            int maximumQueueLengthFirstClassPassenger;
            int maximumQueueLenghtCouchPassesnger;





            // prompt user for duration of the experiment
            Console.Write("Enter duration of the experiment (in minutes): ");
            experimentDurationInMinutes = Convert.ToInt32(Console.ReadLine());

            // prompt user for AVERAGE arrival rate R1 for First Class passengers
            Console.Write("\n\nEnter AVERAGE arrival rate (R1) for First Class passengers: ");
            averageArrivalRateFirstClassR1 = Convert.ToDouble(Console.ReadLine());

            // prompt user for AVERAGE arrival rate R2 for Coach passengers
            Console.Write("Enter AVERAGE arrival rate (R2) for Coach passengers: ");
            averageArrivalRateCoachR2 = Convert.ToDouble(Console.ReadLine());

            // prompt user for SERVICE TIME parameters
            Console.Write("\n\nNOTE: minimum SERVICE TIME for First Class passengers is 1 minute");

            Console.Write("\nEnter maximum (S1) SERVICE TIME for First Class passenger (in minutes): ");
            maximumServiceTimeFirstClass = Convert.ToInt32(Console.ReadLine());

            Console.Write("\n\nNOTE: minimum SERVICE TIME for Coach passengers is 1 minute");

            Console.Write("\nEnter maximum (S2) SERVICE TIME for Coach passenger (in minutes): ");
            maximumServiceTimeCoach = Convert.ToInt32(Console.ReadLine());





            while (passengersTotalServiceTime < experimentDurationInMinutes)
            {
                passengerNumber++;  //counting passengers

                // Generate random arrival time for passengers (between 1 and the experiment duration time).  And put it in a queue.
                passengerArrivalTime = 1 + randomPassengerArrivalTime.Next(experimentDurationInMinutes);

                //generate random passenger type (1 for First Class, else is a Coach passenger)
                if (randomPassengerType.Next(1, 3) == 1)  //is a First Class passenger
                {
                    queueFirstClass.Enqueue("Passenger "+passengerNumber);  //loading in queue 1st INFO
                    if (maximumServiceTimeFirstClass == 1) serviceTime = 1;
                    else
                        serviceTime = 1 + randomServiceTime.Next(maximumServiceTimeFirstClass);  //generating random Service Time for First Class passenger
                    passengersTotalServiceTime = passengersTotalServiceTime + serviceTime;  //argument for while loop
                    queueFirstClass.Enqueue(serviceTime);  //loading in queue 2nd INFO
                    queueFirstClass.Enqueue(passengerArrivalTime);  //loading in queue 3rd INFO
                }
                else //is a Coach passenger
                {
                    queueCoach.Enqueue("Passenger " + passengerNumber);  //loading in queue 1st INFO
                    if (maximumServiceTimeCoach == 1) serviceTime = 1;
                    else
                        serviceTime = 1 + randomServiceTime.Next(maximumServiceTimeCoach);  //generating random Service Time for Coach passenger
                    passengersTotalServiceTime = passengersTotalServiceTime + serviceTime;  //argument for while loop
                    queueCoach.Enqueue(serviceTime);  //loading in queue 2nd INFO
                    queueCoach.Enqueue(passengerArrivalTime);  //loading in queue 3rd INFO
                }
            } //end of while loop       




            //MAXIMUM QUEUE LENGTH FOR FIRST CLASS
            maximumQueueLengthFirstClassPassenger = (queueFirstClass.Count) / 3;

            //MAXIMUM QUEUE LENGTH FOR COACH
            maximumQueueLenghtCouchPassesnger = (queueCoach.Count) / 3;







           //Whenever a service station is available and the corresponding queue is not empty, 
            //we pick the passenger at the front of the queue.
            //ALSO, whenever a First Class service station is available and the First Class queue is empty, 
            //the service station may service a passenger from Coach.
            for (int passengerCounter = passengerNumber; passengerCounter >= 1; passengerCounter--)
            {
                if ((serviceStation1FirstClass.Count == 0) && (queueFirstClass.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation1FirstClass.Enqueue(removedObject = queueFirstClass.Dequeue());
                }
                else if ((serviceStation2FirstClass.Count == 0) && (queueFirstClass.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation2FirstClass.Enqueue(removedObject = queueFirstClass.Dequeue());
                }
                else if ((serviceStation1Coach.Count == 0) && (queueCoach.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation1Coach.Enqueue(removedObject = queueCoach.Dequeue());
                }
                else if ((serviceStation2Coach.Count == 0) && (queueCoach.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation2Coach.Enqueue(removedObject = queueCoach.Dequeue());
                }
                else if ((serviceStation3Coach.Count == 0) && (queueCoach.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation3Coach.Enqueue(removedObject = queueCoach.Dequeue());
                }
                else if (((serviceStation1FirstClass.Count == 0) && (queueFirstClass.Count == 0)) && (queueCoach.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation1FirstClass.Enqueue(removedObject = queueCoach.Dequeue());
                }
                else if (((serviceStation2FirstClass.Count == 0) && (queueFirstClass.Count == 0)) && (queueCoach.Count != 0))
                {
                    for (int counter = 3; counter >= 1; counter--)
                        serviceStation2FirstClass.Enqueue(removedObject = queueCoach.Dequeue());
                }
            } //end of for loop



 


            //STATISTICS GENERATED BY SIMULATION
            Console.WriteLine("\n\n STATISTICS GENERATED BY SIMULATION:");


            averageServiceTime = (float)passengersTotalServiceTime / (float)passengerNumber;
            Console.WriteLine("\n\n AVERAGE SERVICE TIME= {0}", averageServiceTime);


            if (maximumServiceTimeFirstClass >= maximumServiceTimeCoach)
                maximumServiceTime = maximumServiceTimeFirstClass;
            else 
                maximumServiceTime = maximumServiceTimeCoach;
            Console.WriteLine("\n\n MAXIMUM SERVICE TIME= {0}", maximumServiceTime);


            numbersServedInFirstClass = ((serviceStation1FirstClass.Count) / 3) + ((serviceStation2FirstClass.Count) / 3);
            Console.WriteLine("\n\n NUMBERS SERVED FOR FIRST CLASS= {0}", numbersServedInFirstClass);


            numbersServedInCouch = ((serviceStation1Coach.Count) / 3) + ((serviceStation1Coach.Count) / 3) + ((serviceStation3Coach.Count) / 3);
            Console.WriteLine("\n\n NUMBERS SERVED FOR COACH= {0}", numbersServedInCouch);


            Console.WriteLine("\n\n MAXIMUM QUEUE LENGTH FOR FIRST CLASS= {0}", maximumQueueLengthFirstClassPassenger);


            Console.WriteLine("\n\n MAXIMUM QUEUE LENGTH FOR COACH= {0}", maximumQueueLenghtCouchPassesnger);
            Console.WriteLine("\n\n");


        } // end Main


    } // end class
